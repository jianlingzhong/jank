(require 'jank.compiler)
(jank.compiler/native-source '(let* [steps (atom [])]
                                    (letfn [(a []
                                              (try
                                                (b)
                                                (catch e
                                                       (swap! steps conj :a-catch))))
                                            (b []
                                              (try
                                                (throw :ball)
                                                (finally
                                                  (swap! steps conj :b-finally))))]
                                      (a))
                                    @steps))
